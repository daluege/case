#ifndef codebase_op_h
#define codebase_op_h

#define OP_KNOWN    1
#define OP_BRANCH   2
#define OP_INDIRECT 4
#define OP_INSECURE 8
#define OP_FLAGS    16
#define OP_REGULAR  32
#define OP_RM       64

#define OP_INT3 0xcc

#define OP_EXPANSION 0x0f
#define OP_RIP       0xff

#define OP_MAX_LENGTH  15

const char OPCODES[256];

static inline char opflags(const char *text) {
  if (OPCODES[*text] == OP_EXPANSION) return OPCODES[text[1]]&OP_BRANCH;
  return OPCODES[*text];
}

void op_jmp(void *addr) {

}

static inline int op_dest_displace(void *dest, const int max, const void *src, const int factor, const int displacement) {
  const char *i = src;
  unsigned char c, op, opcode, direction, size, mod, reg, rm, scale, index, base;
  char *o = dest;
  if (*i == OP_EXPANSION) *o = *i++;
  c = *i++;
  
}

struct operand {
  unsigned char   base;
  unsigned char   reg;
  unsigned char   scale;
  unsigned long   displacement;
};

//const struct operand op_jmp_dest(void *dest, const int max, const void *src, const int s, const int d) {

const char OPCODES[256] = {
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  0,
  0,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  0,
  0,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  0,
  0,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  0,
  0,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  0,
  0,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  0,
  0,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  0,
  0,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  0,
  0,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN|OP_REGULAR,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN|OP_BRANCH|OP_INDIRECT,
  0,
  OP_KNOWN|OP_INSECURE|OP_FLAGS,
  OP_KNOWN|OP_INSECURE|OP_FLAGS,
  OP_KNOWN|OP_INSECURE|OP_FLAGS,
  OP_KNOWN|OP_INSECURE|OP_FLAGS,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN|OP_BRANCH|OP_INDIRECT,
  OP_KNOWN|OP_BRANCH|OP_INDIRECT,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN|OP_BRANCH|OP_INDIRECT,
  OP_KNOWN|OP_BRANCH|OP_INDIRECT,
  OP_INSECURE,
  OP_INSECURE,
  OP_INSECURE,
  OP_BRANCH|OP_INDIRECT|OP_INSECURE,
  OP_BRANCH|OP_INDIRECT|OP_INSECURE,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN|OP_BRANCH|OP_INDIRECT,
  OP_KNOWN|OP_BRANCH,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN,
  OP_KNOWN };

char OPS2[256] = {
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0,
  0 
};

#endif
